1)João está trabalhando em um sistema Web e ele precisa enviar cabeçalhos HTTP em diversos momentos para, por exemplo, definir cookies
ou redirecionar usuários.
Ao tentar enviar um desses cabeçalhos, João percebeu o seguinte Warning sendo emitido por seu código:
Cannot modify header information - headers already sent.
Com os conhecimentos adquiridos nos cursos de PHP na Web, quais dos seguintes problemas poderá ser encontrado no código de João?

Antes do envio do cabeçalho há alguma saída (exibição) de dados.
Se exibirmos algo antes de enviar um cabeçalho, seja essa exibição proposital (através da função echo por exemplo) ou até mesmo acidental
 (através da emissão de erros do PHP), nós receberemos um aviso dizendo que essa operação não é possível, pois os cabeçalhos já terão sido enviados.

 2)Cláudia, ao trabalhar em uma funcionalidade que depende do upload de um arquivo, percebeu que apesar de selecionar um arquivo válido no formulário,
 continuava não o recebendo no servidor.
 Com os conhecimentos adquiridos nessa aula, qual pode ser a causa do problema de Cláudia?

 Ela não definiu o atributo enctype com o valor multipart/form-data.


 Esse atributo (enctype="multipart/form-data") é obrigatório, para que o navegador saiba como enviar arquivos corretamente através de um formulário.
 Sem ele, o navegador não sabe como transformar o conteúdo do arquivo em um texto que será enviado ao servidor. Com isso, no PHP, a variável $_FILES
 simplesmente chegará vazia.

 3)João, ao entrar na equipe de desenvolvimento de uma nova empresa, estava passando pelo processo de apresentação ao sistema.
 Durante a apresentação, João ouviu o termo flash message enquanto a pessoa que o orientava citava alguns comportamentos do sistema.
 Como você explicaria o conceito de flash message em um sistema web?
 É uma mensagem que aparece apenas uma vez. Ao recarregar a tela, ela some.

 O termo flash veio dessa ideia de ser de rápida duração. Normalmente, nós criamos flash messages usando sessões e apagando esse dado da sessão logo após ler seu conteúdo.

 4)Ao participar de uma equipe de desenvolvimento, foi sugerido que você criasse uma trait para que um comportamento fosse implementado.
 Para ponderar se trait realmente é uma opção válida, é necessário entender suas características e limitações.
   Qual das seguintes alternativas é uma limitação de traits?

   Elas não são um tipo, impedindo o polimorfismo.
   Ao usar uma trait, a classe não passa a ser representada por aquele tipo também. Sendo assim, códigos que dependam do código implementado na
   trait não podem depender de qualquer classe que possua aquela trait. Eles precisam depender diretamente de alguma das classes que a usam.
   Uma solução para esse cenário seria criar um interface.

   _Get -> getQueryParams()
   _POST -> getParseBody()

   5)Durante essa aula foi deixada uma rápida dica, que talvez tenha passado despercebida. Essa dica foi: fazer uso da PSR-17 para criar nossas respostas.
   Isso torna o código ainda mais independente de implementações específicas.
   Como nós poderíamos usar a PSR-17 para criar uma nova resposta, ao invés de simplesmente fazermos new Response de um pacote específico?

   Recebendo uma implementação de ResponseFactoryInterface no construtor.
   Se recebemos um objeto cujo tipo é ResponseFactoryInterface, garantimos que estamos dependendo somente das PSRs e não de algum pacote específico.
   Dessa forma, ao criar nossos controllers, podemos passar qualquer implementação da PSR-17. Inclusive uma nossa, caso queiramos.

   6)Ricardo está conhecendo o código da empresa onde ele acabou de entrar e se deparou com os arquivos de view fazendo uso de um conceito de layouts.
   Essa é a primeira vez que Ricardo usa uma template engine.
   Como podemos explicar para Ricardo o que é um layout quando usamos template engines no PHP?

   Um layout é basicamente uma view especial, que define uma estrutura padrão para que as demais views a utilizem.


   Ao usar template engines nós podemos definir um template padrão, contendo os cabeçalhos, menus e tudo mais que for compartilhado entre diversas views
    (e ter vários layouts diferentes também). Com isso, podemos ter nossos arquivos de view mais simples, definindo apenas o pedaço de código que for específico para cada página.